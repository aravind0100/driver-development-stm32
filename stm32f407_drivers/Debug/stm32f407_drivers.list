
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000634  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007bc  080007c4  000107c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007bc  080007bc  000107c4  2**0
                  CONTENTS
  4 .ARM          00000000  080007bc  080007bc  000107c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007bc  080007c4  000107c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007bc  080007bc  000107bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007c0  080007c0  000107c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000107c4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000107c4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000107f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000980  00000000  00000000  00010837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002b2  00000000  00000000  000111b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000a8  00000000  00000000  00011470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000072  00000000  00000000  00011518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000018dd  00000000  00000000  0001158a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000e2b  00000000  00000000  00012e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00005f7a  00000000  00000000  00013c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001d4  00000000  00000000  00019c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00019de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007a4 	.word	0x080007a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080007a4 	.word	0x080007a4

080001c8 <delayb>:
#define HIGH 1
#define LOW  0
#define BTN_PRESSED LOW

void delayb(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i< 500000/2;i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delayb+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <delayb+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delayb+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	0003d08f 	.word	0x0003d08f

080001f4 <main>:
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed,GPIOBtn;  //create a variable for gpio handle, use gpio structure

	GpioLed.pGPIOx = GPIOA; // select the port, here D port
 80001fa:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <main+0x70>)
 80001fc:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8; // pin configuration , include gpio driver.h file
 80001fe:	2308      	movs	r3, #8
 8000200:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT; //pin mode is output
 8000202:	2301      	movs	r3, #1
 8000204:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; // speed can be anything
 8000206:	2302      	movs	r3, #2
 8000208:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;//use case one push pull
 800020a:	2300      	movs	r3, #0
 800020c:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000212:	2101      	movs	r1, #1
 8000214:	4813      	ldr	r0, [pc, #76]	; (8000264 <main+0x70>)
 8000216:	f000 f853 	bl	80002c0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f8d4 	bl	80003cc <GPIO_Init>

	GPIOBtn.pGPIOx = GPIOB; // select the port, here D port
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <main+0x74>)
 8000226:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12; // pin configuration , include gpio driver.h file
 8000228:	230c      	movs	r3, #12
 800022a:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN; //pin mode is output
 800022c:	2300      	movs	r3, #0
 800022e:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; // speed can be anything
 8000230:	2302      	movs	r3, #2
 8000232:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <main+0x74>)
 800023c:	f000 f840 	bl	80002c0 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 8000240:	463b      	mov	r3, r7
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f8c2 	bl	80003cc <GPIO_Init>
	while(1)
	{
		if(GPIO_ReadFromInputPin(GPIOB, GPIO_PIN_NO_12)== BTN_PRESSED)
 8000248:	210c      	movs	r1, #12
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <main+0x74>)
 800024c:	f000 fa5a 	bl	8000704 <GPIO_ReadFromInputPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1f8      	bne.n	8000248 <main+0x54>
		{
			delayb();
 8000256:	f7ff ffb7 	bl	80001c8 <delayb>
			GPIO_ToggleOutputPin(GPIOA,GPIO_PIN_NO_8 );
 800025a:	2108      	movs	r1, #8
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <main+0x70>)
 800025e:	f000 fa67 	bl	8000730 <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOB, GPIO_PIN_NO_12)== BTN_PRESSED)
 8000262:	e7f1      	b.n	8000248 <main+0x54>
 8000264:	40020000 	.word	0x40020000
 8000268:	40020400 	.word	0x40020400

0800026c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490d      	ldr	r1, [pc, #52]	; (80002ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029a:	f000 fa5f 	bl	800075c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ffa9 	bl	80001f4 <main>

080002a2 <LoopForever>:

LoopForever:
  b LoopForever
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
  ldr   r0, =_estack
 80002a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b0:	080007c4 	.word	0x080007c4
  ldr r2, =_sbss
 80002b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b8:	2000001c 	.word	0x2000001c

080002bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC_IRQHandler>
	...

080002c0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d161      	bne.n	8000396 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a33      	ldr	r2, [pc, #204]	; (80003a4 <GPIO_PeriClockControl+0xe4>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002da:	4b33      	ldr	r3, [pc, #204]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a32      	ldr	r2, [pc, #200]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 80002e6:	e056      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a30      	ldr	r2, [pc, #192]	; (80003ac <GPIO_PeriClockControl+0xec>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002f0:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a2c      	ldr	r2, [pc, #176]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fc:	e04b      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a2b      	ldr	r2, [pc, #172]	; (80003b0 <GPIO_PeriClockControl+0xf0>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000306:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030a:	4a27      	ldr	r2, [pc, #156]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000312:	e040      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <GPIO_PeriClockControl+0xf4>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a21      	ldr	r2, [pc, #132]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000328:	e035      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a22      	ldr	r2, [pc, #136]	; (80003b8 <GPIO_PeriClockControl+0xf8>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000332:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033e:	e02a      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a1e      	ldr	r2, [pc, #120]	; (80003bc <GPIO_PeriClockControl+0xfc>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e01f      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <GPIO_PeriClockControl+0x100>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800035e:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e014      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a15      	ldr	r2, [pc, #84]	; (80003c4 <GPIO_PeriClockControl+0x104>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e009      	b.n	8000396 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <GPIO_PeriClockControl+0x108>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d105      	bne.n	8000396 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <GPIO_PeriClockControl+0xe8>)
 8000390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40020000 	.word	0x40020000
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40020400 	.word	0x40020400
 80003b0:	40020800 	.word	0x40020800
 80003b4:	40020c00 	.word	0x40020c00
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40021400 	.word	0x40021400
 80003c0:	40021800 	.word	0x40021800
 80003c4:	40021c00 	.word	0x40021c00
 80003c8:	40022000 	.word	0x40022000

080003cc <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff6e 	bl	80002c0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d820      	bhi.n	800042e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	795b      	ldrb	r3, [r3, #5]
 80003f0:	461a      	mov	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	2103      	movs	r1, #3
 800040c:	fa01 f303 	lsl.w	r3, r1, r3
 8000410:	43db      	mvns	r3, r3
 8000412:	4619      	mov	r1, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	400a      	ands	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	6819      	ldr	r1, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	697a      	ldr	r2, [r7, #20]
 8000428:	430a      	orrs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	e0cb      	b.n	80005c6 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	795b      	ldrb	r3, [r3, #5]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d117      	bne.n	8000466 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000436:	4b4b      	ldr	r3, [pc, #300]	; (8000564 <GPIO_Init+0x198>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	4611      	mov	r1, r2
 8000440:	2201      	movs	r2, #1
 8000442:	408a      	lsls	r2, r1
 8000444:	4611      	mov	r1, r2
 8000446:	4a47      	ldr	r2, [pc, #284]	; (8000564 <GPIO_Init+0x198>)
 8000448:	430b      	orrs	r3, r1
 800044a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044c:	4b45      	ldr	r3, [pc, #276]	; (8000564 <GPIO_Init+0x198>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	7912      	ldrb	r2, [r2, #4]
 8000454:	4611      	mov	r1, r2
 8000456:	2201      	movs	r2, #1
 8000458:	408a      	lsls	r2, r1
 800045a:	43d2      	mvns	r2, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a41      	ldr	r2, [pc, #260]	; (8000564 <GPIO_Init+0x198>)
 8000460:	400b      	ands	r3, r1
 8000462:	6093      	str	r3, [r2, #8]
 8000464:	e035      	b.n	80004d2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	795b      	ldrb	r3, [r3, #5]
 800046a:	2b05      	cmp	r3, #5
 800046c:	d117      	bne.n	800049e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046e:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <GPIO_Init+0x198>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	7912      	ldrb	r2, [r2, #4]
 8000476:	4611      	mov	r1, r2
 8000478:	2201      	movs	r2, #1
 800047a:	408a      	lsls	r2, r1
 800047c:	4611      	mov	r1, r2
 800047e:	4a39      	ldr	r2, [pc, #228]	; (8000564 <GPIO_Init+0x198>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000484:	4b37      	ldr	r3, [pc, #220]	; (8000564 <GPIO_Init+0x198>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	7912      	ldrb	r2, [r2, #4]
 800048c:	4611      	mov	r1, r2
 800048e:	2201      	movs	r2, #1
 8000490:	408a      	lsls	r2, r1
 8000492:	43d2      	mvns	r2, r2
 8000494:	4611      	mov	r1, r2
 8000496:	4a33      	ldr	r2, [pc, #204]	; (8000564 <GPIO_Init+0x198>)
 8000498:	400b      	ands	r3, r1
 800049a:	60d3      	str	r3, [r2, #12]
 800049c:	e019      	b.n	80004d2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	795b      	ldrb	r3, [r3, #5]
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d115      	bne.n	80004d2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a6:	4b2f      	ldr	r3, [pc, #188]	; (8000564 <GPIO_Init+0x198>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7912      	ldrb	r2, [r2, #4]
 80004ae:	4611      	mov	r1, r2
 80004b0:	2201      	movs	r2, #1
 80004b2:	408a      	lsls	r2, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a2b      	ldr	r2, [pc, #172]	; (8000564 <GPIO_Init+0x198>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004bc:	4b29      	ldr	r3, [pc, #164]	; (8000564 <GPIO_Init+0x198>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7912      	ldrb	r2, [r2, #4]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a25      	ldr	r2, [pc, #148]	; (8000564 <GPIO_Init+0x198>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	089b      	lsrs	r3, r3, #2
 80004d8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	f003 0303 	and.w	r3, r3, #3
 80004e2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1f      	ldr	r2, [pc, #124]	; (8000568 <GPIO_Init+0x19c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d04e      	beq.n	800058c <GPIO_Init+0x1c0>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1e      	ldr	r2, [pc, #120]	; (800056c <GPIO_Init+0x1a0>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d032      	beq.n	800055e <GPIO_Init+0x192>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <GPIO_Init+0x1a4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d02b      	beq.n	800055a <GPIO_Init+0x18e>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <GPIO_Init+0x1a8>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d024      	beq.n	8000556 <GPIO_Init+0x18a>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a19      	ldr	r2, [pc, #100]	; (8000578 <GPIO_Init+0x1ac>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d01d      	beq.n	8000552 <GPIO_Init+0x186>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a18      	ldr	r2, [pc, #96]	; (800057c <GPIO_Init+0x1b0>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d016      	beq.n	800054e <GPIO_Init+0x182>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a16      	ldr	r2, [pc, #88]	; (8000580 <GPIO_Init+0x1b4>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d00f      	beq.n	800054a <GPIO_Init+0x17e>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a15      	ldr	r2, [pc, #84]	; (8000584 <GPIO_Init+0x1b8>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d008      	beq.n	8000546 <GPIO_Init+0x17a>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <GPIO_Init+0x1bc>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d101      	bne.n	8000542 <GPIO_Init+0x176>
 800053e:	2308      	movs	r3, #8
 8000540:	e025      	b.n	800058e <GPIO_Init+0x1c2>
 8000542:	2300      	movs	r3, #0
 8000544:	e023      	b.n	800058e <GPIO_Init+0x1c2>
 8000546:	2307      	movs	r3, #7
 8000548:	e021      	b.n	800058e <GPIO_Init+0x1c2>
 800054a:	2306      	movs	r3, #6
 800054c:	e01f      	b.n	800058e <GPIO_Init+0x1c2>
 800054e:	2305      	movs	r3, #5
 8000550:	e01d      	b.n	800058e <GPIO_Init+0x1c2>
 8000552:	2304      	movs	r3, #4
 8000554:	e01b      	b.n	800058e <GPIO_Init+0x1c2>
 8000556:	2303      	movs	r3, #3
 8000558:	e019      	b.n	800058e <GPIO_Init+0x1c2>
 800055a:	2302      	movs	r3, #2
 800055c:	e017      	b.n	800058e <GPIO_Init+0x1c2>
 800055e:	2301      	movs	r3, #1
 8000560:	e015      	b.n	800058e <GPIO_Init+0x1c2>
 8000562:	bf00      	nop
 8000564:	40013c00 	.word	0x40013c00
 8000568:	40020000 	.word	0x40020000
 800056c:	40020400 	.word	0x40020400
 8000570:	40020800 	.word	0x40020800
 8000574:	40020c00 	.word	0x40020c00
 8000578:	40021000 	.word	0x40021000
 800057c:	40021400 	.word	0x40021400
 8000580:	40021800 	.word	0x40021800
 8000584:	40021c00 	.word	0x40021c00
 8000588:	40022000 	.word	0x40022000
 800058c:	2300      	movs	r3, #0
 800058e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000590:	4b59      	ldr	r3, [pc, #356]	; (80006f8 <GPIO_Init+0x32c>)
 8000592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000594:	4a58      	ldr	r2, [pc, #352]	; (80006f8 <GPIO_Init+0x32c>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800059c:	7c7a      	ldrb	r2, [r7, #17]
 800059e:	7cbb      	ldrb	r3, [r7, #18]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	fa02 f103 	lsl.w	r1, r2, r3
 80005a6:	4a55      	ldr	r2, [pc, #340]	; (80006fc <GPIO_Init+0x330>)
 80005a8:	7cfb      	ldrb	r3, [r7, #19]
 80005aa:	3302      	adds	r3, #2
 80005ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005b0:	4b53      	ldr	r3, [pc, #332]	; (8000700 <GPIO_Init+0x334>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	4a4f      	ldr	r2, [pc, #316]	; (8000700 <GPIO_Init+0x334>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	799b      	ldrb	r3, [r3, #6]
 80005ca:	461a      	mov	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2103      	movs	r1, #3
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	43db      	mvns	r3, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	400a      	ands	r2, r1
 80005f4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6899      	ldr	r1, [r3, #8]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	430a      	orrs	r2, r1
 8000604:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	79db      	ldrb	r3, [r3, #7]
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	68da      	ldr	r2, [r3, #12]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	2103      	movs	r1, #3
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	4619      	mov	r1, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	400a      	ands	r2, r1
 8000634:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68d9      	ldr	r1, [r3, #12]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	430a      	orrs	r2, r1
 8000644:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7a1b      	ldrb	r3, [r3, #8]
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	4619      	mov	r1, r3
 8000662:	2301      	movs	r3, #1
 8000664:	408b      	lsls	r3, r1
 8000666:	43db      	mvns	r3, r3
 8000668:	4619      	mov	r1, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	400a      	ands	r2, r1
 8000670:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6859      	ldr	r1, [r3, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	430a      	orrs	r2, r1
 8000680:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	795b      	ldrb	r3, [r3, #5]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d131      	bne.n	80006ee <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	08db      	lsrs	r3, r3, #3
 8000690:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	7c3a      	ldrb	r2, [r7, #16]
 80006a2:	3208      	adds	r2, #8
 80006a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	220f      	movs	r2, #15
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	7c3a      	ldrb	r2, [r7, #16]
 80006bc:	4001      	ands	r1, r0
 80006be:	3208      	adds	r2, #8
 80006c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7c3a      	ldrb	r2, [r7, #16]
 80006ca:	3208      	adds	r2, #8
 80006cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7a5b      	ldrb	r3, [r3, #9]
 80006d4:	461a      	mov	r2, r3
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7c3a      	ldrb	r2, [r7, #16]
 80006e6:	4301      	orrs	r1, r0
 80006e8:	3208      	adds	r2, #8
 80006ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40013800 	.word	0x40013800
 8000700:	40013c00 	.word	0x40013c00

08000704 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691a      	ldr	r2, [r3, #16]
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	fa22 f303 	lsr.w	r3, r2, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]

   return value;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	78fa      	ldrb	r2, [r7, #3]
 8000742:	2101      	movs	r1, #1
 8000744:	fa01 f202 	lsl.w	r2, r1, r2
 8000748:	405a      	eors	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	615a      	str	r2, [r3, #20]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <__libc_init_array>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	4d0d      	ldr	r5, [pc, #52]	; (8000794 <__libc_init_array+0x38>)
 8000760:	4c0d      	ldr	r4, [pc, #52]	; (8000798 <__libc_init_array+0x3c>)
 8000762:	1b64      	subs	r4, r4, r5
 8000764:	10a4      	asrs	r4, r4, #2
 8000766:	2600      	movs	r6, #0
 8000768:	42a6      	cmp	r6, r4
 800076a:	d109      	bne.n	8000780 <__libc_init_array+0x24>
 800076c:	4d0b      	ldr	r5, [pc, #44]	; (800079c <__libc_init_array+0x40>)
 800076e:	4c0c      	ldr	r4, [pc, #48]	; (80007a0 <__libc_init_array+0x44>)
 8000770:	f000 f818 	bl	80007a4 <_init>
 8000774:	1b64      	subs	r4, r4, r5
 8000776:	10a4      	asrs	r4, r4, #2
 8000778:	2600      	movs	r6, #0
 800077a:	42a6      	cmp	r6, r4
 800077c:	d105      	bne.n	800078a <__libc_init_array+0x2e>
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f855 3b04 	ldr.w	r3, [r5], #4
 8000784:	4798      	blx	r3
 8000786:	3601      	adds	r6, #1
 8000788:	e7ee      	b.n	8000768 <__libc_init_array+0xc>
 800078a:	f855 3b04 	ldr.w	r3, [r5], #4
 800078e:	4798      	blx	r3
 8000790:	3601      	adds	r6, #1
 8000792:	e7f2      	b.n	800077a <__libc_init_array+0x1e>
 8000794:	080007bc 	.word	0x080007bc
 8000798:	080007bc 	.word	0x080007bc
 800079c:	080007bc 	.word	0x080007bc
 80007a0:	080007c0 	.word	0x080007c0

080007a4 <_init>:
 80007a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a6:	bf00      	nop
 80007a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007aa:	bc08      	pop	{r3}
 80007ac:	469e      	mov	lr, r3
 80007ae:	4770      	bx	lr

080007b0 <_fini>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	bf00      	nop
 80007b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b6:	bc08      	pop	{r3}
 80007b8:	469e      	mov	lr, r3
 80007ba:	4770      	bx	lr
